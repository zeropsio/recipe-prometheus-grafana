zerops:
  - setup: prometheuslight
    build:
      deployFiles: ./prometheus/~/
    run:
      base: alpine@latest

      prepareCommands:
        - curl -L -o prometheus.tar.gz https://github.com/prometheus/prometheus/releases/download/v3.5.0/prometheus-3.5.0.linux-amd64.tar.gz
        - tar -xz -C /var/www/ -f prometheus.tar.gz --strip-components=1 prometheus-3.5.0.linux-amd64/prometheus prometheus-3.5.0.linux-amd64/promtool

      initCommands:
        - zsc envReplace prometheus.yml.tmpl prometheus.yml

      start: ./prometheus --web.enable-lifecycle --web.enable-admin-api --web.enable-remote-write-receiver --storage.tsdb.retention.time=${RETENTION_TIME:-15d}

      ports:
        - port: 9090
          httpSupport: true

  - setup: prometheus
    extends: prometheuslight
    run:
      initCommands:
        - zsc envReplace prometheus.yml.tmpl prometheus.yml
        # restore data from backup
        - mkdir -p /var/www/data || true
        - zsc object-storage restore --storage data_backups --name "${ZEROPS_StackName}-data" --ignore-non-existing /var/www/data

      crontab:
        # periodic backup, every hour
        - timing: "0 * * * *"
          command: |
            curl -X POST http://localhost:9090/api/v1/admin/tsdb/snapshot && \
            snapshot=$(ls -t ./data/snapshots/ | head -n1) && \
            cd ./data/snapshots/"$snapshot" && \
            zsc object-storage backup --storage data_backups --name "${ZEROPS_StackName}-data" --truncate-count ${BACKUP_COUNT:-6} ./ && \
            rm -rf /var/www/data/snapshots/"$snapshot";
          allContainers: false

      envVariables:
        data_backups_apiUrl: ${backups_apiUrl}
        data_backups_accessKeyId: ${backups_accessKeyId}
        data_backups_secretAccessKey: ${backups_secretAccessKey}
        data_backups_bucketName: ${backups_bucketName}

  - setup: grafana
    build:
      deployFiles: ./grafana/~/
    run:
      base: alpine@latest

      prepareCommands:
        - curl -L https://dl.grafana.com/oss/release/grafana-12.1.0.linux-amd64.tar.gz -o grafana.tar.gz
        - tar -xz -C /var/www/ -f grafana.tar.gz --strip-components=1
        - rm grafana.tar.gz

      start: ./bin/grafana server --homepath /var/www/

      ports:
        - port: 3000
          httpSupport: true
        - port: 10000
          description: gRPC server

      envVariables:
        GF_DATABASE_URL: postgres://${db_user}:${db_password}@${db_hostname}:${db_port}/${db_dbName}
        GF_DATABASE_HIGH_AVAILABILITY: "true"
        GF_LOG_MODE: syslog
